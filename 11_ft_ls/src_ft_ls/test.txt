/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   test.c                                             :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: jtsai <marvin@42.fr>                       +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2019/09/25 13:03:34 by jtsai             #+#    #+#             */
/*   Updated: 2019/09/25 13:03:45 by jtsai            ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "ft_ls.h"

/*
ls -l:

	file mode, 
	number of links, 
	owner name, 
	group name, 
	number of bytes in the file, 
	abbreviated month, 
	day-of-month file was last modified, 
	hour file last modified, 
	minute file last modified, 
	pathname.
*/

char file_type(mode_t mode)
{
	mode_t m;

	m = mode & S_IFMT;

	if (m == S_IFREG)
		return '-';
	else if (m == S_IFDIR)
		return 'd';
	else if (m == S_IFLNK)
		return 'l';
	else if (m == S_IFBLK)
		return 'b';
	else if (m == S_IFCHR)
		return 'c';
	else if (m == S_IFIFO)
		return 'p';
	else if (m == S_IFSOCK)
		return 's';
	return '?';
}

void test(char *s)
{
	int i;
	struct stat fileStat;
	char type;
	char buff[PATH_MAX];

	i = 0;
	printf("path name: %s\n", s);

	if (readlink(s, buff, PATH_MAX) == -1)
		i = stat(s, &fileStat);
	else
		i = lstat(s, &fileStat);
	
	mode_t mode = fileStat.st_mode;
	type = file_type(mode);

	printf("stat: %d\n\n", i);
	if (i < 0)
		return;

	printf("File Permissions: \t");
	printf("%d\n", mode);

	for (i = 15; i >= 0; i--)
	{
		if (mode & (1 << i))
			printf("1");
		else
			printf("0");
		if (i == 12)
			printf(" ");
	}
	printf("\n");

	printf("%c", type);
	printf((mode & S_IRUSR) ? "r" : "-");
	printf((mode & S_IWUSR) ? "w" : "-");
	printf((mode & S_IXUSR) ? "x" : "-");
	printf((mode & S_IRGRP) ? "r" : "-");
	printf((mode & S_IWGRP) ? "w" : "-");
	printf((mode & S_IXGRP) ? "x" : "-");
	printf((mode & S_IROTH) ? "r" : "-");
	printf((mode & S_IWOTH) ? "w" : "-");
	printf((mode & S_IXOTH) ? "x" : "-");
	printf("\n\n");

	printf("ID of device containing file: \t%d\n", fileStat.st_dev);
	printf("Number of Links: \t%d\n", fileStat.st_nlink);

	struct passwd *pw = getpwuid(fileStat.st_uid);
	struct group *gr = getgrgid(fileStat.st_gid);

	printf("File Owner: \t%s\n", pw->pw_name);
	printf("File Group: \t%s\n", gr->gr_name);

	printf("File Size: \t%lld bytes\n", fileStat.st_size);
	printf("File inode: \t%lld\n\n", fileStat.st_ino);
	printf("blocks allocated for file: %lld\n", fileStat.st_blocks);
	printf("optimal file sys I/O ops blocksize: %d\n", fileStat.st_blksize);
	printf("user defined flags for file: %u\n", fileStat.st_flags);
	printf("file generation number: %u\n\n", fileStat.st_gen);

	printf(" File access time: %s\n", ctime(&fileStat.st_atime));
	printf(" File modify time: %s\n", ctime(&fileStat.st_mtime));
	printf(" File modify time(sec): %ld\n", fileStat.st_mtimespec.tv_sec);
	printf(" File modify time(nano-sec): %ld\n", fileStat.st_mtimespec.tv_nsec);

	time_t sec;
	time(&sec);
	printf(" current time(sec): %ld\n", sec);
	printf(" different: %ld\n\n", sec - fileStat.st_mtimespec.tv_sec);

	printf(" File changed time: %s\n", ctime(&fileStat.st_ctime));
	printf(" File birth time: %s\n", ctime(&fileStat.st_birthtime));

	struct dirent *read;
	DIR *dir;

	dir = opendir(s);
	if (dir)
	{
		printf("\nDir: \n");
		while ((read = readdir(dir)) != NULL)
		{
			printf("[%s]\n", read->d_name);
		}
		closedir(dir);
	}
	printf("==============================================\n");
}

void test_read_link()
{
	char buff[PATH_MAX] = {};
	char cwd[PATH_MAX] = {};
	int n;

	if (getcwd(cwd, sizeof(cwd)) != NULL)
		printf("Current working dir: %s\n", cwd);
	n = readlink("/nfs/2018/j/jtsai/goinfre", buff, PATH_MAX);
	printf("link: %d, buff: %s\n\n", n, buff);
	n = readlink("../goinfre", buff, PATH_MAX);
	printf("link: %d, buff: %s\n\n", n, buff);
	n = readlink("/tmp", buff, PATH_MAX);
	printf("link: %d, buff: %s\n\n", n, buff);
	n = readlink("../../jtsai/goinfre", buff, PATH_MAX);
	printf("link: %d, buff: %s\n\n", n, buff);
	n = readlink("..//goinfre", buff, PATH_MAX);
	printf("link: %d, buff: %s\n\n", n, buff);
	n = readlink("../goinfre", 0, 0);
	printf("link: %d, buff: %s\n\n", n, buff);
	n = readlink("../", buff, PATH_MAX);
	printf("link: %d, buff: %s\n\n", n, buff);
}

int main(int ac, char **av)
{
	int i;

	if (ac == 2)
	{
		test(av[1]);
	}
	else if (ac == 1)
	{
		printf("path max = %d\n", PATH_MAX);
		printf("name max = %d\n", NAME_MAX);
		test_read_link();
	}
	else
	{
		for (i = 1; i < ac; i++)
		{
			printf("arg_length = %lu\n", strlen(av[i]));
			printf("%s\n", av[i]);
			printf("\n");
		}
	}
	return 0;
}